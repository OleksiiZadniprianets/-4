# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1P2ml3ICatIxBCD77i80210aP53Ls3twu
"""

import numpy as np
import matplotlib.pyplot as plt
from numpy.polynomial import Polynomial

# Вихідні координати
x_vals = np.array([0.1, 0.3, 0.4, 0.6, 0.7])
y_vals = np.array([3.2, 3.0, 1.0, 1.8, 1.9])

# Побудова полінома ступеня 4 через поліноміальну апроксимацію
degree = 4
poly_coeff = np.polyfit(x_vals, y_vals, degree)
interp_poly = Polynomial(poly_coeff[::-1])  # Формат для Polynomial

# Вивід коефіцієнтів полінома
print("Параметри побудованого полінома:")
for idx, val in enumerate(poly_coeff[::-1]):
    print(f"b{idx} = {val:.4f}")

# Створення функції на основі полінома
def evaluate(x):
    return interp_poly(x)

# Побудова графіка інтерполяції
x_range = np.linspace(min(x_vals)-0.05, max(x_vals)+0.1, 200)
y_range = evaluate(x_range)

plt.figure(figsize=(10, 6))
plt.plot(x_range, y_range, lw=2, label='Поліном інтерполяції (ступінь 4)')
plt.scatter(x_vals, y_vals, color='crimson', edgecolors='black', s=70, label='Опорні точки', zorder=3)
plt.title("Графік інтерполяційної кривої")
plt.xlabel("Аргумент x")
plt.ylabel("Значення f(x)")
plt.legend()
plt.grid(True)
plt.show()

# Обчислення значень у нових точках
new_points = np.array([0.2, 0.5])
interpolated_vals = evaluate(new_points)

print("\nОбчислені значення для проміжних аргументів:")
for xi, yi in zip(new_points, interpolated_vals):
    print(f"f({xi}) ≈ {yi:.4f}")